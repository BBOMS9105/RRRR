library(ggplot2)
geom_point() +
# 옵션
theme_bw() +
xlim(0, 20) +
ylim(0, 5)
library(ggplot2)
iris = iris
# 데이터 구조
str(iris)
# 시각화
ggplot(data = iris,
aes(x = Sepal.Length),
y = Petal.Width)) +
# 시각화
ggplot(data = iris,
aes(x = Sepal.Length),
y = Petal.Width)) +
library(ggplot2)
iris = iris
# 데이터 구조
str(iris)
# 시각화
ggplot(data = iris,
aes(x = Sepal.Length,
y = Petal.Width)) +
geom_point() +
# 옵션
theme_bw() +
xlim(0, 20) +
ylim(0, 5)
# mpg 데이터 가져오기
data()
mpg = mpg
str(mpg)
ggplot(mpg, aes(x = year, y = cyl))
ggplot(mpg, aes(x = displ, y = cty)) +
geom_point(shape = 20, size =3)+
theme_bw()
table(mpg$cyl)
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geop_point
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ class, nrow = 3) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ class, nrow = 3) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ manufacturer, nrow = 3) +
theme_bw()
table(mpg$manufacturer)
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ manufacturer, nrow = 10) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy, color = trans3d())) +
geom_point() +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy, color = trans3d(x))) +
geom_point() +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy, color = trans3d())) +
geom_point() +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(size = 3) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(size = 3, color = trans3d(
)) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(size = 3, color = trans3d()) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(size = 3, color = transform()) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(size = 3) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy, color = transform())) +
geom_point(size = 3) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy, color = trans())) +
geom_point(size = 3) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy, color = trans())) +
geom_point(size = 3) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
library(ggplot2)
iris = iris
# 데이터 구조
str(iris)
# 시각화
ggplot(data = iris,
aes(x = Sepal.Length,
y = Petal.Width)) +
geom_point() +
# 옵션
theme_bw() +
xlim(0, 20) +
ylim(0, 5)
# mpg 데이터 가져오기
data()
mpg = mpg
str(mpg)
ggplot(mpg, aes(x = displ, y = cty)) +
geom_point(shape = 20, size =3)+
theme_bw()
table(mpg$cyl)
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy, color = trans())) +
geom_point(size = 3) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
# Facets
# 그래프를 세부적으로 분리
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(size = 3) +
facet_wrap(~ manufacturer, nrow = 5) +
theme_bw()
ggplot(data = mpg) +
geom_smooth(aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_boxplot(aes(x = class, y = hwy))
library(dplyr)
install.packages('tidyverse')
result2 <- 1 / 20 * 30
result = 1 / 20 * 30
char_vector <- c()
help(c)
char_vector
char_vector <- c("A", "B", "C")
class(char_vector)
char_vector
city <- c("서울", "부산", "서울", "부산")
city
class(city)
city <- factor(c("서울", "부산", "서울", "부산"))
class(city)
city
# dplyr SQL 문법과 유사한게 많음
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
flights = nycflights13::flights
glimpse(flights)
# SELECT
flights %>%
# SELECT
flights %>%
select(year, month, day) -> result2
# SELECT
flights %>%
select(year, month, day) -> result2
# SELECT
SELECT FROM WHERE
flights %>%
select(year, month, day, carrier, distance)
filter(distance = 1400 & carrier %in% c("UA", "AA", "B6")) %>%
group_by(carrier) %>%
summarise(avg_distance = mean(distance)) %>%
arrange(desc(avg_distance)) %>%
filter(avg_distance >= 2100)
# SELECT
# python flights.gruopby
#SELECT FROM WHERE
flights %>%
select(year, month, day, carrier, distance)
filter(distance = 1400 & carrier %in% c("UA", "AA", "B6")) %>%
group_by(carrier) %>%
summarise(avg_distance = mean(distance)) %>%
arrange(desc(avg_distance)) %>%
filter(avg_distance >= 2100)
# SELECT
# python flights.gruopby
#SELECT FROM WHERE
flights %>%
select(year, month, day, carrier, distance)
filter(distance = 1400 & carrier %in% c("UA", "AA", "B6")) %>%
group_by(carrier) %>%
summarise(avg_distance = mean(distance)) %>%
arrange(desc(avg_distance)) %>%
filter(avg_distance >= 2100)
# SELECT
# python flights.gruopby
#SELECT FROM WHERE
flights %>%
select(year, month, day, carrier, distance)
# SELECT
# python flights.gruopby
#SELECT FROM WHERE
flights %>%
select(year, month, day, carrier, distance) %>%
filter(distance = 1400 & carrier %in% c("UA", "AA", "B6")) %>%
group_by(carrier) %>%
summarise(avg_distance = mean(distance)) %>%
arrange(desc(avg_distance)) %>%
filter(avg_distance >= 2100)
# SELECT
# python flights.gruopby
#SELECT FROM WHERE
flights %>%
select(year, month, day, carrier, distance) %>%
filter(distance = 1400 & carrier %in% c("UA", "AA", "B6")) %>%
group_by(carrier) %>%
summarise(avg_distance = mean(distance)) %>%
arrange(desc(avg_distance)) %>%
filter(avg_distance >= 2100)
# SELECT
# python flights.gruopby
#SELECT FROM WHERE
flights %>%
select(year, month, day, carrier, distance) %>%
filter(distance >= 1400 & carrier %in% c("UA", "AA", "B6")) %>%
group_by(carrier) %>%
summarise(avg_distance = mean(distance)) %>%
arrange(desc(avg_distance)) %>%
filter(avg_distance >= 2100)
# 결측치 다루기
NA > 10 # NA --> 난 모름
NA == 5
NA + 100 # NA
NA == NA
a = NA
is.na(a)
temp <- tibble(x = c(1, 2, NA, 4))
temp
# filter
temp %>% filter(x > 1)
# filter, 반드시 NA도 같이 출력이 되어야 ㅏㅁ
temp %>% filter(x > 1 | is.na(x))
temp %>% filter(is.na(x))
# SELECT문 다시보기
glimpse(flights)
flights %>%
selct()
flights %>%
selct(dep_delay)
flights %>%
select(dep_delay)
flights %>%
select(year, month, day, dep_delay)
flights %>%
select(year : dep_delay)
glimpse(flights)
flights %>%
select(contains("time"))
# mutate() : 컬럼의 상태를 변경하는 메소드
data <- flights %>%
select(year:day, ends_with("_time"), distance)
data
glimpse(data)
data %>%
mutate(time_diff = arr_time - dep_time)
select(dep_time, arr_time, time_diff)
data %>%
mutate(time_diff = arr_time - dep_time)
select(dep_time, arr_time, time_diff)
glimpse(data)
data %>%
mutate(time_diff = arr_time - dep_time)
select(dep_time, arr_time, time_diff)
data %>%
mutate(time_diff = arr_time - dep_time) %>%
select(dep_time, arr_time, time_diff)
# 윈도우 함수
# rank(), dense_rank(), row_number()
flights %>%
row_number(dep_time)
# 윈도우 함수
# rank(), dense_rank(), row_number()
flights %>%
row_number(dep_time)
# 윈도우 함수
# rank(), dense_rank(), row_number()
flights %>%
row_number()
row_number(temp_num)
# 윈도우 함수
# rank(), dense_rank(), row_number()
temp_num <- c(1, 2, 2, 3, NA, 32, 4, 5)
row_number(temp_num)
dense_rank(temp_num)
percent_rank(temp_num)
glimpse(flights)
# SELECT문 다시보기
glimpse(flights)
# dplyr + ggplot2 한꺼번에 작성하기
library(ggplot2)
flights %>%
group_by(dest) %>%
summarise(count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(count > 20 & dest !="ACK")
flights %>%
group_by(dest) %>%
summarise(count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(count > 20 & dest !="ACK")
flights %>%
group_by(dest) %>%
summarise(count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(count > 20 & dest !="ACK") -> result
flights %>%
group_by(dest) %>%
summarise(count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(count > 20 & dest !="ACK") %>%
ggplot(aes(x = dist, y = delay)) +
geom_point() +
theme_bw()
# 파일 입출력
# csv 파일 불러오기
mpg = read.csv(file = "data/mpg6.csv")
mpg
write.csv(mpg,file = "data/result.csv")
install.packages("writexl")
# install.packages("writexl")
library(writexl)
write_xlsx(mpg, "data/result.xlsx")
# 엑셀 파일 불러오기
install.packages("readxl")
library(readxl)
mpg2 = read_excel(path = 'data/reuslt.xlsx')
mpg2 = read_excel(path = 'data/result.xlsx')
mpg2
mpg
